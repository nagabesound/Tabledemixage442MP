/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stm32746g_discovery_lcd.h"
#include "stm32746g_discovery_ts.h"
#include <string.h>
#include <stdio.h>
#include "adc.h"
#include "dac.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ADC_BUF_LEN  256
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
uint16_t volume1=0,volume2=0;
uint16_t position_rect1=100,position_rect2=100;
uint32_t entree1=0, entree2=0;
/* USER CODE END Variables */
osThreadId defaultTaskHandle;
osThreadId AffichageHandle;
osThreadId Aquisition_ADCHandle;
osThreadId ToucheHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);
void Tache_Affiche(void const * argument);
void Tache_Acquisition(void const * argument);
void Tache_touche(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of Affichage */
  osThreadDef(Affichage, Tache_Affiche, osPriorityIdle, 0, 2048);
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);

  /* definition and creation of Aquisition_ADC */
  osThreadDef(Aquisition_ADC, Tache_Acquisition, osPriorityHigh, 0, 256);
  Aquisition_ADCHandle = osThreadCreate(osThread(Aquisition_ADC), NULL);

  /* definition and creation of Touche */
  osThreadDef(Touche, Tache_touche, osPriorityIdle, 0, 128);
  ToucheHandle = osThreadCreate(osThread(Touche), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_Tache_Affiche */
/**
* @brief Function implementing the Affichage thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_Affiche */
void Tache_Affiche(void const * argument)
{
  /* USER CODE BEGIN Tache_Affiche */
	char text[60];
  /* Infinite loop */
  for(;;)
  {

	  BSP_LCD_Clear(LCD_COLOR_WHITE);
	  BSP_LCD_FillRect(114,position_rect2,20,40);
	  BSP_LCD_FillRect(340,position_rect1,20,40);
	  //snprintf(text,"volume1 : %4u volume2 : %4u ",(uint16_t)volume1,(uint16_t)volume2);
	  //BSP_LCD_DisplayStringAtLine(1,(uint8_t*)text);

    osDelay(20);
  }
  /* USER CODE END Tache_Affiche */
}

/* USER CODE BEGIN Header_Tache_Acquisition */
/**
* @brief Function implementing the Aquisition_ADC thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_Acquisition */
void Tache_Acquisition(void const * argument)
{
  /* USER CODE BEGIN Tache_Acquisition */
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
	//uint32_t entree1, entree2;
	uint16_t sortie;


	uint16_t adc1_buffer[ADC_BUF_LEN];
	uint16_t adc3_buffer[ADC_BUF_LEN];
	uint16_t dac_output[ADC_BUF_LEN]; // buffer de sortie
  /* Infinite loop */
  for(;;)
  {

	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
	  entree1 = HAL_ADC_GetValue(&hadc3);

	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
	  entree2 = HAL_ADC_GetValue(&hadc1);

	  HAL_ADC_Start(&hadc3);
	  HAL_ADC_Start(&hadc1);

	  HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
	  //sortie = (entree1*volume1+entree2*volume2)>>12;

	  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, ADC_BUF_LEN);
	  //HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buffer, ADC_BUF_LEN);
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, entree2);

    osDelay(2);
  }
  /* USER CODE END Tache_Acquisition */
}

/* USER CODE BEGIN Header_Tache_touche */
/**
* @brief Function implementing the Touche thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tache_touche */
void Tache_touche(void const * argument)
{
  /* USER CODE BEGIN Tache_touche */
	static TS_StateTypeDef  TS_State;
  /* Infinite loop */
  for(;;)
  {

		BSP_TS_GetState(&TS_State);
		if(TS_State.touchDetected){

			//BSP_LCD_FillRect(114,position_rect1,10,20);

			if (TS_State.touchX[0]>230){


				position_rect1= TS_State.touchY[0];

				if (position_rect1 > 210){position_rect1=210;}
				if (position_rect1 < 75){position_rect1=75;}

				volume1 = 210 - position_rect1;

			}
			else{
				position_rect2= TS_State.touchY[0];

				if (position_rect2 > 210){position_rect2=210;}
				if (position_rect2 < 75){position_rect2=75;}

				volume2 = 210 - position_rect2;

			}
		}
    osDelay(2);
  }
  /* USER CODE END Tache_touche */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

